using System;
using SD = System.Drawing;

using Rhino.Geometry;

using Grasshopper.Kernel;
using GH_IO.Serialization;

namespace RhinoCodePlatform.Rhino3D.Projects.Plugin.GH
{
  public sealed class ProjectComponentCTX_24b096b5 : ProjectComponent_Base, IGH_ContextualComponent, IGH_DocumentOwner
  {
    static readonly string s_scriptData = "";
    static readonly string s_scriptIconData = "iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwgAADsIBFShKgAAAAWRJREFUSEu1lb1KA0EQgH06MaX2VqksYmUr+ADW+gCpjGAak+gJOWIiQhBCwFgEfwoFQQTxCUa+lQmzmzO5OzfFx+3O7s43uyy3a+uthqySmaDSPpWty2YUyOUJCOxeJ1JN21Go9a5ko/UrcQKsDKj1v1TTjmxeNF07U7DdPZe923QpOj9koYCFJ48Psj/sy9FkNIO+TX5wN5D69N5LrCwUsIgdhLugrwmU0gKd+BfM5xtFwJjdCdy8v7k4czVmd1hIkLy+eMlh/PkhO/3EE5w9T12MNYUEYR+0WjumItpLBSHEs7BjuQXHk5Hr0waS0OeoNGbHtJ1bAEi0euDOP31/eTGwhRQSWEjEF0k4Zikt4MaElWeht401hQRcvzB2OB7OxTjWXNc0hKpspbojKgaN2yMsJLBQpSZlZ7Sz/lGlBSTVilUSVZCXOQFPZq3Hk9mJAk9mxT6ZwBuKNQaa3BOshob8AKN9TIo2q6YMAAAAAElFTkSuQmCC";

    public override Guid ComponentGuid { get; } = new Guid("24b096b5-c4ce-4f86-8796-e49228b5ddb7");

    public override GH_Exposure Exposure { get; } = GH_Exposure.primary;

    public override bool Obsolete { get; } = false;

    public ProjectComponentCTX_24b096b5() : base(s_scriptData, s_scriptIconData,
        name: "IN-SYNQ",
        nickname: "IN-SYNQ",
        description: "Rhino/Grasshopper Live Bridge",
        category: "IN-SYNQ",
        subCategory: "Default"
        )
    {
    }

    protected override void RegisterInputParams(GH_InputParamManager _) { }
    protected override void RegisterOutputParams(GH_OutputParamManager _) { }

    protected override void BeforeSolveInstance() => m_script.BeforeSolve(this);

    protected override void SolveInstance(IGH_DataAccess DA) => m_script.Solve(this, DA);

    protected override void AfterSolveInstance() => m_script.AfterSolve(this);

    public override BoundingBox ClippingBox => m_script.GetClipBox(this);

    public override void DrawViewportWires(IGH_PreviewArgs args) => m_script.DrawWires(this, args);

    public override void DrawViewportMeshes(IGH_PreviewArgs args) => m_script.DrawMeshes(this, args);

    #region IGH_ContextualComponent
    GH_Archive IGH_ContextualComponent.Archive => m_script.Archive;
    #endregion

    #region IGH_DocumentOwner
    GH_Document IGH_DocumentOwner.OwnerDocument() => OnPingDocument();

    void IGH_DocumentOwner.DocumentClosed(GH_Document document)
    {
      // Internal docs are embedded, we don't need to do anything.
    }

    void IGH_DocumentOwner.DocumentModified(GH_Document document)
    {
      // Internal docs are embedded, we don't need to do anything.
    }
    #endregion
  }
}
